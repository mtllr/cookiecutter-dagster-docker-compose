version: "3.7"
volumes:
  {{cookiecutter.project_slug}}_postgres_data: {}
  {{cookiecutter.project_slug}}_postgres_data_backups: {}
services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  {{cookiecutter.project_slug}}_postgres:
    image: postgres:15
    container_name: {{cookiecutter.project_slug}}_postgres
    env_file:
      - ./.envs/.production
    volumes:
      - {{cookiecutter.project_slug}}_postgres_data:/var/lib/postgresql/data
      - {{cookiecutter.project_slug}}_postgres_data_backups:/backups
    networks:
      - {{cookiecutter.project_slug}}_network

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  {{cookiecutter.project_slug}}_user_code:
    build:
      context: .
      dockerfile: ./docker/user_code.Dockerfile
      target: production
    container_name: {{cookiecutter.project_slug}}_user_code
    image: {{cookiecutter.project_slug}}_user_code_image
    restart: always
    env_file:
      - ./.envs/.production
    environment:
      DAGSTER_CURRENT_IMAGE: "{{cookiecutter.project_slug}}_user_code_image"
    networks:
      - {{cookiecutter.project_slug}}_network

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  {{cookiecutter.project_slug}}_webserver: &dagster
    build:
      context: .
      dockerfile: ./docker/dagster.Dockerfile
      target: production
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: {{cookiecutter.project_slug}}_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    env_file:
      - ./.envs/.production
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - {{cookiecutter.project_slug}}_network
    depends_on:
      - {{cookiecutter.project_slug}}_postgres
      - {{cookiecutter.project_slug}}_user_code

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  {{cookiecutter.project_slug}}_daemon:
    <<: *dagster
    entrypoint:
      - dagster-daemon
      - run
    expose: []
    ports: []
    container_name: {{cookiecutter.project_slug}}_daemon
    restart: on-failure


networks:
  {{cookiecutter.project_slug}}_network:
    driver: bridge
    name: {{cookiecutter.project_slug}}_network